{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#planet-mercury","title":"Planet Mercury","text":"<p>Mercury is intended a replacement for Sam Ruby's Planet Venus.</p> <p>A planet is a kind of feed aggregator. It takes a list of newsfeeds (Atom, RSS, &amp;c.), splices them together, and spits a set of HTML pages and/or a feed.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>If you have the Go toolchain already configured, you can <code>go install</code> the binary:</p> <pre><code>go install github.com/kgaughan/mercury/cmd/@latest\n</code></pre> <p>By default, mercury will look for look for a file called mercury.toml in the current directory. This feed is in TOML format, but the key thing you need to know is that keys and values are separated with an <code>=</code>, string values must be quoted, and <code>[[feed]]</code> introduces new feed configuration.</p> <p>If you want to use an explicitly named configuration file, you can pass this with the <code>--config</code> flag.</p> <p>Here is an example file:</p> mercury.toml<pre><code>name = \"My Planet!\"\nurl = \"https://example.com/\"\nowner = \"Jane Doe\"\nemail = \"jane.doe@example.com\"\ncache = \"./cache\"\ntimeout = \"20s\"\ntheme = \"./theme\"\noutput = \"./output\"\nitems = 10\nmax_pages = 2\n\n[[feed]]\nname = \"Keith Gaughan\"\nfeed = \"https://keith.gaughan.ie/feeds/all.xml\"\n\n[[feed]]\nname = \"Inklings\"\nfeed = \"https://talideon.com/inklings/feed\"\n</code></pre> <p>See the configuration details for more details on the meaning of each field.</p> <p>Then run:</p> <pre><code>mercury\n</code></pre> <p>This will fetch all the feeds to the cache directory and write the site to the output directory.</p>"},{"location":"#command-line","title":"Command line","text":"<p>The <code>--help</code> flag will show you the help information:</p> <pre><code>$ ./mercury --help\nmercury - Generates an aggregated site from a set of feeds.\n\nFlags:\n  -c, --config string   path to configuration (default \"./mercury.toml\")\n  -h, --help            show help\n  -B, --no-build        don't build anything\n  -F, --no-fetch        don't fetch, just use what's in the cache\n  -V, --version         print version and exit\n</code></pre> <p>Usually, the default behaviour is what you want: mercury will try to intelligently fetch any feeds and regenerate the site. Use <code>--no-build</code> if you just want to prime the cache but don't want to generate the site. Use <code>--no-fetch</code> if you want to regenerate the site without fetching any feeds. This can be useful if you're testing out a new theme.</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#splicing","title":"Splicing","text":"<p>To efficiently splice together multiple feeds by date, Mercury arranges the feeds into a heap, and for each feed maintains the index of the current topmost item in the feed. As it pulls out entries, it performs a heapify operation using the publication date of the topmost item in each feed as the key. This guarantees that the first feed is always the one with the most recent entry while doing the least amount of processing. It then takes the topmost item in that feed, increments its counter, and starts the cycle again. This effectively does a partial heapsort of the total collection of feed items.</p> <p>One weakness with the current implementaton is that it doesn't yet deal with feeds that don't sort their items in reverse chronological order. Two options would be to sort feeds as they're pulled down or to heapify the entries similarly to what's done with the feeds themselves. This latter approach is probably the best one to take if there are many feeds with many items. For feeds that are already sorted, the heap property should already hold, so the impact for them would be negligible.</p>"},{"location":"architecture/#cache-directory","title":"Cache directory","text":"<p>The cache directory stores the cache manifest in <code>manifest.json</code>, and cached copies of feeds serialised as JSON files.</p> <p>The manifest file consists of a map of feed URLs to metadata, including the UUID used for the cache filename, the last modified date, and the entity tag, both of which are used to make conditional GET requests against the target feed to minimise Mercury's bandwidth impact.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>The top-level configuration fields are:</p> Name Type Description Default name string The name of your planet \"Planet\" url string The base URL of your planet \"\" owner string Your name \"\" email string Your email \"\" feed_id string Unique ID to use for the Atom feed \"\" cache string The path, relative to mercury.toml of the feed cache \"./cache\" timeout duration How long to wait when fetching a feed - theme string The path, relative to mercury.toml of the theme to use use default theme output string The path, relative to mercury.toml to which mercury should write the files it generates \"./output\" items number The number of items to include per page 10 max_pages number The maximum number of pages to generate 5 <p>Note that the <code>theme</code>, <code>output</code>, and <code>cache</code> paths are assumed to be relative to the directory in which the configuration file is found, not the current working directory. You can specify absolute paths in these fields, however.</p> <p>A duration is a sequence of numbers followed by a unit, with 's' being 'second', 'm' being 'minute', and 'h' being 'hour'. Thus '5m30s' would mean five minutes and thirty seconds.</p> <p>The feed ID is a URI identifying the feed. I would recommend using a tag URI, or a UUID URN. In the latter case, use a UUID generator such as <code>uuidgen</code> to generate a UUID, prefix it with <code>urn:uuid:</code>, and use the result as the value of <code>feed_id</code>.</p> <p>Each feed is introduced with <code>[[feed]]</code>, and can contain the following fields:</p> Name Type Description name string The name of the feed feed string The URL of the feed. Note that this must be the URL of the feed itself and no attempt is made to do feed discovery if all that's provided is the site's homepage"},{"location":"container/","title":"Deploying as a container","text":"<p>There's a container image published at <code>ghcr.io/kgaughan/mercury</code>. It expects a volume mounted at <code>/data</code> and one at <code>/config</code> for your data and configuration respectively.</p> <p>Here's an example configuration file you can use to try things out. Save this as <code>mercury.toml</code>:</p> <pre><code>name = \"My Planet!\"\nurl = \"http://localhost/\"\nfeed_id = \"uri:urn:032a6e90-899c-4d27-aa94-b99e2c1c343f\"\nowner = \"Jane Doe\"\nemail = \"jane@example.com\"\ncache = \"/data/cache\"\ntimeout = \"20s\"\noutput = \"/data/output\"\nitems = 10\nmax_pages = 2\n\n[[feed]]\nname = \"Keith Gaughan\"\nfeed = \"https://keith.gaughan.ie/feeds/all.xml\"\n\n[[feed]]\nname = \"Inklings\"\nfeed = \"https://talideon.com/inklings/feed\"\n</code></pre> <p>Here's a quick demonstration of how to use the configuration file and mount volumes within the container. Note the use of <code>-u \"$(id -u):$(id -g)</code>: the image is based off of a Distroless image that defaults to the root user, so this is necessary to run the mercury binary as your user, otherwise it'll have issues accessing <code>/data</code> within the container.</p> <pre><code>$ mkdir -p volumes/data volumes/config\n$ cp mercury.toml volumes/config\n$ docker run --rm --user \"$(id -u):$(id -g)\" \\\n    --volume ./volumes/data:/data --volume ./volumes/config:/config \\\n    ghcr.io/kgaughan/mercury:latest\nUnable to find image 'ghcr.io/kgaughan/mercury:latest' locally\nlatest: Pulling from kgaughan/mercury\n259db2ee6b87: Pull complete\n2e4cf50eeb92: Pull complete\n56ce5a7a0a8c: Pull complete\ne1089d61b200: Pull complete\n0f8b424aa0b9: Pull complete\nd557676654e5: Pull complete\nd82bc7a76a83: Pull complete\nd858cbc252ad: Pull complete\n1069fc2daed1: Pull complete\nb40161cd83fc: Pull complete\n3f4e2c586348: Pull complete\neb8f5749650b: Pull complete\n6a6214ee1035: Pull complete\nDigest: sha256:1668181ece1cf6c5db042eff4a59bf741c65cdac823629408a044e0252d148e8\nStatus: Downloaded newer image for ghcr.io/kgaughan/mercury:latest\n2025/10/27 23:24:16 Priming manifest with 2 feeds using 8 workers, with a queue depth of 16\n2025/10/27 23:24:16 Fetching https://keith.gaughan.ie/feeds/all.xml\n2025/10/27 23:24:16 https://keith.gaughan.ie/feeds/all.xml: cache not expired\n2025/10/27 23:24:16 Fetching https://talideon.com/inklings/feed\n2025/10/27 23:24:16 https://talideon.com/inklings/feed: cache not expired\n2025/10/27 23:24:16 Finding most recent 20 entries across 2 feeds\n2025/10/27 23:24:16 Writing Atom feed\n2025/10/27 23:24:16 Writing OPML file\n</code></pre> <p>If you now list the contents of <code>volumes/data/output</code>, you'll see the newly-generated site.</p>"},{"location":"themes/","title":"Themes","text":"<p>A theme is a directory that contains the template files and assets needed to generate the site. Currently, there is only one template <code>index.html</code>. Mercury uses Go's html/template library, which is built upon text/template. You should read the documentation for the latter to get a feel for the templating language and read the former for any HTML-specific behavioural differences differences.</p> <p>The template supplied in the default built-in theme should be a good jumping-off point. The top-level fields available are:</p> Name Description .Name The name field from config.toml .URL The url field from config.toml .Owner The owner field from config.toml .Email The email field from config.toml .PageNo The current page number .Items A collection of feed items to be rendered <p>Each feed item has the following fields:</p> Name Description Extras .FeedName The name of the feed this item is from .SiteLink The site homepage for the feed .FeedLink The URL of the feed .FeedPublished The publication date/time of the feed formattable .FeedUpdated The date/time of when the feed was updated formattable .Title The title of the item .Summary A summary of the feed item, if available .Content The entire content of the feed item, if available .Link A lnk back to the original post .Author The author name, if available .Published The publication date/time of the entry formattable .Updated The date/time of when entry was updated formattable .Categories A collection of categories associated with the entry rangeable <p>You can use text/template's <code>{{range}}</code> action to iterate over the values in <code>.Items</code>. For instance, to print the title of each entry and its link, you'd do:</p> <pre><code>&lt;ul&gt;\n{{range .Items}}\n&lt;li&gt;&lt;a href=\"{{.Link}}\"&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;\n{{end}}\n&lt;/ul&gt;\n</code></pre> <p>Mercury provides a number of utility filter functions you can use for formatting dates. <code>isodate</code> formats the date in ISO 8601/RFC 3339 format, which is machine readable and useful for the <code>&lt;time&gt;</code> tag's <code>datetime</code> attribute. It also includes the Sprig template function library.</p> <p>Here's an example of both being used:</p> <pre><code>&lt;time datetime=\"{{.Published | isodate}}\"&gt;{{.Published | date \"January 2, 2006 at 15:04:05 MST\"}}&lt;/time&gt;\n</code></pre>"},{"location":"themes/#bill-of-materials","title":"Bill of Materials","text":"<p>A theme directory must also contain a <code>theme.toml</code> file. This contains metadata about the theme (currently just its name, which is given in the <code>name</code> field) and optionally a bill of materials listing the files to be copied across, each entry in which is introduced with <code>[[bom]]</code>. Here's an example file:</p> theme.toml<pre><code>name = \"Community\"\n\n[[bom]]\npath = \"static/style.css\"\n\n[[bom]]\npath = \"static/images/banner.png\"\n</code></pre> <p>This lists two files in its BOM, which are copied across when the output directory is populated.</p>"}]}